// <auto-generated />
using System;
using LibraryManagementAPI.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryManagementAPI.Migrations
{
    [DbContext(typeof(LibraryContext))]
    [Migration("20250120113919_Initial Migration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("LibraryManagementModels.BookModel", b =>
                {
                    b.Property<string>("ISBN")
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("isBorrowed")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("ISBN");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            ISBN = "9780132350884",
                            Author = "Robert C. Martin",
                            Description = "A Handbook of Agile Software Craftsmanship.",
                            Genre = "Programming",
                            Title = "Clean Code",
                            isBorrowed = false
                        },
                        new
                        {
                            ISBN = "9780321127426",
                            Author = "Eric Evans",
                            Description = "Tackling Complexity in the Heart of Software.",
                            Genre = "Software Development",
                            Title = "Domain-Driven Design",
                            isBorrowed = false
                        },
                        new
                        {
                            ISBN = "9780596007126",
                            Author = "Eric Freeman & Elisabeth Robson",
                            Description = "A brain-friendly guide to design patterns.",
                            Genre = "Design Patterns",
                            Title = "Head First Design Patterns",
                            isBorrowed = false
                        },
                        new
                        {
                            ISBN = "9780134494166",
                            Author = "Andrew Hunt & David Thomas",
                            Description = "Your Journey to Mastery, 20th Anniversary Edition.",
                            Genre = "Programming",
                            Title = "The Pragmatic Programmer",
                            isBorrowed = false
                        });
                });

            modelBuilder.Entity("LibraryManagementModels.TransactionModel", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("BorrowDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("BorrowerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("TransactionId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("LibraryManagementModels.UserModel", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("82b5ac8f-d873-4abe-9548-423719e41f59"),
                            Email = "johndoe@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            PasswordHash = "5f4dcc3b5aa765d61d8327deb882cf99",
                            PhoneNumber = "09122222222",
                            UserName = "johndoe12345678"
                        },
                        new
                        {
                            UserId = new Guid("3eab4793-18b1-473a-811b-9f7ac1b95f8e"),
                            Email = "janesmith@example.com",
                            FirstName = "Jane",
                            LastName = "Smith",
                            PasswordHash = "e99a18c428cb38d5f260853678922e03",
                            PhoneNumber = "09123444444",
                            UserName = "janesmith87654321"
                        },
                        new
                        {
                            UserId = new Guid("e6129633-16f2-421f-ac6a-3853f6bb200e"),
                            Email = "michaeljohnson@example.com",
                            FirstName = "Michael",
                            LastName = "Johnson",
                            PasswordHash = "d8578edf8458ce06fbc5bb76a58c5ca4",
                            PhoneNumber = "09912312322",
                            UserName = "michaeljohnson1212"
                        },
                        new
                        {
                            UserId = new Guid("2bc9144c-64d8-4c23-814a-d1e0641a66fb"),
                            Email = "emilydavis@example.com",
                            FirstName = "Emily",
                            LastName = "Davis",
                            PasswordHash = "25f9e794323b453885f5181f1b624d0b",
                            PhoneNumber = "09123543211",
                            UserName = "emilydavis24681357"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
